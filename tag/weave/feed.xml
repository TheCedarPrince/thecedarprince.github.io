<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:georss="http://www.georss.org/georss">

  <channel>
    <title>
      <![CDATA[  the cedar ledge  ]]>
    </title>
    <link> https://jacobzelko.com </link>
    <description>
      <![CDATA[  Jacob S. Zelko&#39;s personal website  ]]>
    </description>
    <atom:link
      href="https://jacobzelko.com/feed.xml"
      rel="self"
      type="application/rss+xml" />


<item>
  <title>
    <![CDATA[  Asynchronous Workflow Using Julia Tutorial  ]]>
  </title>
  <link> https://jacobzelko.com/01082023043553-julia-async-workflow/index.html </link>
  <guid> https://jacobzelko.com/01082023043553-julia-async-workflow/index.html </guid>
  <description>
    <![CDATA[  A thorough tutorial on how to use Julia for asynchronous workflows to do many things, at once&#33;  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Asynchronous Workflow Using Julia Tutorial</h1>
<p><strong>Date:</strong> January 7 2023</p>
<p><strong>Summary:</strong> A thorough tutorial on how to use Julia for asynchronous workflows to do many things, at once&#33;</p>
<p><strong>Keywords:</strong> #blog #archive #julia #programming #literate #workflow #asynchronous #weave #browser #sync #node</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Motivation</li><li>Set-Up</li><li>Simple Workflow Process<ol><li>Blocking Workflow</li><li>Asynchronous Workflow</li></ol></li><li>Asynchronous Workflow for Literate Programming</li><li>Conclusion</li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="motivation">Motivation</h3>
<p>I sometimes find myself wanting to execute a Julia file I have just edited.  This is different than what the excellent <a href="https://github.com/timholy/Revise.jl">Revise.jl package &#40;created by Tim Holy&#41;</a> does in that I want to execute the full file and not just update function definitions. Moreover, I may just want Julia to do something else entirely upon updating a file or directory. This can be very helpful in analysis workflows as well as literate programming. Creating an extended post on my process for this was inspired by a <a href="https://discourse.julialang.org/t/franklin-jl-automatically-evaluate-jl-file-on-change/92580/6">Julia Discourse post I provided an answer to</a>.</p>
<h3 id="set-up">Set-Up</h3>
<p>Here is how I recommend setting up your Julia environment to follow this tutorial &#40;I assume you have Julia installed correctly&#41;:</p>
<ol>
<li><p>Create an empty directory &#40;folder&#41; somewhere on your computer. &#40;NOTE: For sake of this tutorial, I will refer to it as the &quot;test&quot; folder&#41;.</p>
</li>
<li><p>Within your favorite text editor &#40;like Notepad, Vim, VSCode, etc.&#41;, open this directory.</p>
</li>
<li><p>Open and create a file called &quot;tmp.jmd&quot; &#40;NOTE: Keep the file and your editor open as we will be coming back to this file quite a lot&#41;.</p>
</li>
<li><p>Open your Julia REPL within the directory and activate a temporary environment within package mode:</p>
</li>
</ol>
<pre><code class="language-julia-repl">pkg&gt; activate --temp</code></pre>
<ol start="5">
<li><p>Add into this temporary environment the following packages:</p>
</li>
</ol>
<pre><code class="language-julia-repl">pkg&gt; add FileWatching, Weave</code></pre>
<ol start="6">
<li><p>Install node onto your machine.</p>
</li>
</ol>
<p>I suggest using the great tool, <a href="https://github.com/nvm-sh/nvm"><code>nvm</code>, which allows easy management of node versions</a>.</p>
<ol start="7">
<li><p>Install the node package, <a href="https://www.npmjs.com/package/browser-sync"><code>browser-sync</code>, which allows for syncing of webpages based on updates</a>.</p>
</li>
</ol>
<p>Here is the command you can use in your command line: </p>
<pre><code class="language-sh">npm i -g browser-sync</code></pre>
<blockquote>
<p>NOTE: Steps 6 and 7 are not necessary if you are not interested in the section on literate programming</p>
</blockquote>
<h3 id="simple_workflow_process">Simple Workflow Process</h3>
<p>There are two ways to start this workflow.  One blocking &#40;i.e. you cannot use the Julia REPL while working&#41; and another spawning an asynchronous background process to enable you to work with the same REPL. Here is gif showing these workflows in action:</p>
<p><img src="https://jacobzelko.com/assets/01082023043553-watching-example.gif" alt="" /></p>
<h4 id="blocking_workflow">Blocking Workflow</h4>
<p>This creates a synchronous task in your Julia REPL that can then run whatever command you want while you monitor a specific file &#40;or folder&#41;. In this case, I am making the task print a statement that says “Change Detected&#33;” to my REPL whenever there is a change in the file called “tmp.jmd”.</p>
<pre><code class="language-julia">using FileWatchingwhile true 
    watch_file&#40;&quot;./tmp.jmd&quot;&#41;
    println&#40;&quot;Change Detected&#33;&quot;&#41;
end</code></pre>
<p>This workflow is not optimal as this loop continues and locks your REPL from doing anything else. </p>
<h4 id="asynchronous_workflow">Asynchronous Workflow</h4>
<p>This creates an asynchronous task in the background of your Julia REPL that can then run whatever command you want while you monitor a specific file &#40;or folder&#41;. In this case, I am making the task print a statement that says “Change Detected&#33;” to my REPL whenever there is a change in the file called “tmp.jmd”.</p>
<pre><code class="language-julia">using FileWatching@async while true 
    watch_file&#40;&quot;./tmp.jmd&quot;&#41;
    println&#40;&quot;Change Detected&#33;&quot;&#41;
end</code></pre>
<p>From here, you could then still interact with this REPL while this task is running in the background. Furthermore, you can change the line that says <code>println&#40;&quot;Change Detected&#33;&quot;&#41;</code> to whatever command &#40;or commands&#41; you want to trigger.</p>
<h3 id="asynchronous_workflow_for_literate_programming">Asynchronous Workflow for Literate Programming</h3>
<p>This workflow allows one to work with a Julia Markdown document with <code>Weave.jl</code> to preview your work in real time.  There a few steps to start the workflow but here is how it looks when in operation:</p>
<p><img src="https://jacobzelko.com/assets/01082023043553-weave-example.gif" alt="" /></p>
<p>First, execute the following snippet in your Julia REPL to start the asynchronous process to watch for changes and tell Julia to weave the file we will modify:</p>
<pre><code class="language-julia">using FileWatching
using Weave@async while true 
    watch_file&#40;&quot;./tmp.jmd&quot;&#41;
    weave&#40;&quot;./tmp.jmd&quot;&#41;
end</code></pre>
<p>Next, run this in a separate terminal:</p>
<pre><code class="language-sh">browser-sync start --server --start --file &quot;./*.html&quot;</code></pre>
<p>or this command within your Julia REPL &#40;NOTE: This will make your REPL session very cluttered but you can still use your REPL&#41;:</p>
<pre><code class="language-julia">@async run&#40;&#96;browser-sync start --server --start --file &quot;./*.html&quot;&#96;&#41;</code></pre>
<p>At this point, you should see <code>browser-sync</code> spit out a lot of information that looks something like this:</p>
<pre><code class="language-sh">&#91;Browsersync&#93; Access URLs:
 --------------------------------------
       Local: http://localhost:3000
    External: http://192.168.1.186:3000
 --------------------------------------
          UI: http://localhost:3001
 UI External: http://localhost:3001
 --------------------------------------
&#91;Browsersync&#93; Serving files from: ./</code></pre>
<p>You&#39;ll want to grab that URL that looks like <code>http://localhost:3000</code> in the <code>Local</code> spot and then open that in your web browser.  With the URL that you get &#40;it could be on a different port&#41;, navigate to <code>http://localhost:3000/tmp.html</code>.</p>
<p>Finally, when you have this all in place, go ahead and add this code block into the <code>tmp.jmd</code> file that was created:</p>
<pre><code class="language-markdown"># Hello World This is a Julia Markdown file. &#96;&#96;&#96;julia 
2 &#43; 2
&#96;&#96;&#96;</code></pre>
<p>You should see a few things happen.  You&#39;ll see a few messages from the Julia REPL stating that <code>Weave.jl</code> is weaving your document to your desired output. Then, you&#39;ll see <code>browser-sync</code> say something about updating or syncing.  Finally, you will see your browser update to the latest version of your weaved document. </p>
<p>Feel free to play around with this more and see the dynamism of the workflow&#33; I tend to do this when I am iteratively developing reports within Julia and want to tinker within the REPL at the same time I am creating documents. Having to wait for rendering <code>Weave.jl</code> documents and the like was a pain and this took the pain away.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I hope you appreciated this post&#33; If you have any suggestions, comments, or additional workflows this could be used for, please comment below.  May your Julia sessions now be even more supercharged&#33;</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Asynchronous Workflow Using Julia Tutorial</em>. <a href="https://jacobzelko.com/01082023043553-julia-async-workflow">https://jacobzelko.com/01082023043553-julia-async-workflow</a>. January 7 2023.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>
</channel></rss>