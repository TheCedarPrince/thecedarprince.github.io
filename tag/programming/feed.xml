<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
  xmlns:content="http://purl.org/rss/1.0/modules/content/"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:media="http://search.yahoo.com/mrss/"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:georss="http://www.georss.org/georss">

  <channel>
    <title>
      <![CDATA[  the cedar ledge  ]]>
    </title>
    <link> https://jacobzelko.com </link>
    <description>
      <![CDATA[  Jacob S. Zelko&#39;s personal website  ]]>
    </description>
    <atom:link
      href="https://jacobzelko.com/feed.xml"
      rel="self"
      type="application/rss+xml" />


<item>
  <title>
    <![CDATA[  Resources for Learning the Julia Programming Language  ]]>
  </title>
  <link> https://jacobzelko.com/10082023195125-julia-learning-resources/index.html </link>
  <guid> https://jacobzelko.com/10082023195125-julia-learning-resources/index.html </guid>
  <description>
    <![CDATA[  A non-exhaustive list of recommendations for how I suggest learning Julia to language newcomers  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Resources for Learning the Julia Programming Language</h1>
<p><strong>Date:</strong> October 8 2023</p>
<p><strong>Summary:</strong> A non-exhaustive list of recommendations for how I suggest learning Julia to language newcomers</p>
<p><strong>Keywords:</strong> #julia #programming #beginners #recommendations #learning #archive #blog</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Before Programming with Julia, Let&#39;s Set It Up</li><li>Julia Programming for New Programmers</li><li>Quickly Picking Up Julia Programming</li><li>What Is a Julian?</li><li>Building Up Expertise in Julia Programming</li><li>Domain Specific Workflows in Julia<ol><li>Working with Data</li><li>Plotting</li></ol></li><li>Conclusion</li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3>Motivation</h3>
<p>I saw an interesting post on <a href="https://bsky.app/profile/naturepoker.bsky.social/post/3kb7gi65xqm2a">BlueSky recently</a> that got me thinking about Julia learning resources. I tend to give out a lot of advice about how to go about learning Julia but I realized I have never really centralized one place where I keep that information. This blog post talks about my personal opinions both within the Julia ecosystem and recommendations for how to learn Julia.</p>
<h3 id="before_programming_with_julia_lets_set_it_up">Before Programming with Julia, Let&#39;s Set It Up</h3>
<p>The fantastic initiative, <a href="modernjuliaworkflows.github.io/">Modern Julia Workflows</a>, spearheaded by Guillaume Dalle and co has a number of sections that can help with getting set-up fast &#40;I&#39;ll be referring to their work quite a bit throughout this post&#41;. In particular, here are the sections I&#39;d recommend to get set-up fastest:</p>
<ol>
<li><p><a href="https://modernjuliaworkflows.github.io/pages/writing/#installation">How to install Julia on your computer</a></p>
</li>
<li><p><a href="https://modernjuliaworkflows.github.io/pages/writing/#installation">What you need to write Julia</a>.</p>
</li>
</ol>
<p>A special note on this from me is that you really do not need much – you could use something like NotePad on Windows, textedit on OSX, or KWrite on *nix systems. I like the stance Dalle takes in recommending VSCode however as this gives you the best mileage whether you are a beginner or expert programmer.</p>
<p>Suggestion 2 here will most likely take you the longest if you have never worked with a text editor before &#40;a piece of software to create and edit most different types of files&#41;. So, no worries and enjoy the learning here&#33;</p>
<h3 id="julia_programming_for_new_programmers">Julia Programming for New Programmers</h3>
<p>If you are completely new to programming in general, I&#39;d recommend the course, <a href="https://juliaacademy.com/p/julia-programming-for-nervous-beginners">Julia Programming for Nervous Beginners</a>, by Dr. Henri Laurie. It really eases you through how to start with programming and uses Julia as that learning tool. Otherwise, skip to the next section.</p>
<h3 id="quickly_picking_up_julia_programming">Quickly Picking Up Julia Programming</h3>
<p>To pick up Julia programming, I recommend <a href="https://juliaacademy.com/p/intro-to-julia">Introduction to Julia &#40;for programmers&#41;</a> by Dr. Jane Herriman. This will get you going with Julia the fastest – especially if you already know some programming.</p>
<h3 id="what_is_a_julian">What Is a Julian?</h3>
<p>Before continuing your Julia adventure, it is worth a pause to discuss a couple aspects of Julia that one may not immediately recognize but are crucial in a productive Julia workflow. Otherwise, one may end up despairing over the supposed virtues of Julia. Here are some specific pieces:</p>
<ol>
<li><p>Julia is a REPL-centric workflow.</p>
</li>
</ol>
<p>If you are unfamiliar with what a REPL is, please see <a href="https://modernjuliaworkflows.github.io/pages/writing/writing/#repl">this reference for details</a> but in short, the Julia REPL is a continuous loop that accepts all valid inputs. From loading a file, experimenting with code, or calling functions, the REPL serves as a scratchpad to iteratively build your overall Julia software instantly.</p>
<ol start="2">
<li><p>Julia is compiled – packages and functions will take a moment to load for use.</p>
</li>
</ol>
<p>This builds on the previous point, but yes, as Julia is compiled, any package or function you want to use may execute slightly longer initially but then will be compiled for the duration of your work session. This is why you want your Julia workflow to be REPL-centric as you can get around this issue.</p>
<ol start="3">
<li><p>Julians organize Julia software into &quot;projects&quot; or packages.</p>
</li>
</ol>
<p>Whether you are writing a collection of small scripts to analyze some data or developing a completely new software package, to effectively maneuver through your Julia code, make liberal use of <a href="">Pkg.jl</a>.  Dalle has an excellent reference that talks about this concept of <a href="https://modernjuliaworkflows.github.io/pages/writing/writing/#local_packages">project environments</a> as well as how to build your own <a href="https://modernjuliaworkflows.github.io/pages/writing/writing/#local_packages">local package</a>.</p>
<ol start="4">
<li><p>Working within Julia can be extremely efficient – if you know how.</p>
</li>
</ol>
<p>This is a circular statement as it naturally raises the question of, &quot;how do I actually build a concrete Julia workflow?&quot; Thankfully, <a href="https://modernjuliaworkflows.github.io/pages/writing/writing/#development_workflow">much has been written about this</a></p>
<ol start="5">
<li><p>Julians want to help you.</p>
</li>
</ol>
<p>What is wonderful about the Julia community is that, in contrast to perhaps alternative internet communities, the bulk of Julians greatly enjoy helping not only other Julians but other programmers in general &#40;there has been numerous occasions where I have seen Julians help other language users become even more proficient in their workflows&#41;. This is an <a href="https://modernjuliaworkflows.github.io/pages/writing/writing/#getting_help">invaluable assortment</a> of where to find your fellow Julians.</p>
<p>I hope this section does not come off as overtly prescriptive, but I have seen the notion of &quot;you are holding the tool wrong&quot; or &quot;what is Julian&quot; &#40;i.e. how do proficient Julia users do X&#41; pop up too many times for new Julians or those experimenting with the language. I hope with this nudging guidance here, a new Julian can more clearly understand the &quot;why&quot; of what other more proficient Julians recommend.</p>
<h3 id="building_up_expertise_in_julia_programming">Building Up Expertise in Julia Programming</h3>
<p>At this stage, we can now move from the beginner to intermediate Julian stage. Here, I think the world of Julia quite truly opens up to the new user. To delve deeper into Julia, here are some resources I would personally recommend:</p>
<ul>
<li><p>Believe it or not, the <a href="https://docs.julialang.org/">Julia documentation</a> is actually really nice to read and accessible.</p>
</li>
</ul>
<p>Now, I don&#39;t just say this as I have helped write some of it, but I do truly think it worth looking through to get a better feel for aspects of Julia one may not consider.  I would suggest starting with the Manual section of the documentation.</p>
<ul>
<li><p>Check out the <a href="https://computationalthinking.mit.edu/Fall22/">MIT Computational Thinking Course</a> to have a more hands-on introduction to scientific computing.</p>
</li>
</ul>
<p>I have never personally gone through it, but I hear it highly praised.</p>
<ul>
<li><p>Try solving problems on <a href="https://exercism.io/tracks/julia">Exercism.io</a> to practice and improve your skills.</p>
</li>
</ul>
<p>I am a mentor here although don&#39;t have as much time anymore to help review. I still find this to be a really great place to further your learning and to get better at programming Julia – you&#39;ll often get feedback from expert Julia users which, in itself, is extremely valuable.</p>
<h3 id="domain_specific_workflows_in_julia">Domain Specific Workflows in Julia</h3>
<p>I will probably spin out the following sub-sections into their own blogs, but here are some selected domain specific workflows I have used or become familiar with that I use regularly within Julia.</p>
<h4 id="working_with_data">Working with Data</h4>
<p>This admittedly broad workflow encompasses much, but the most important packages in this space are:</p>
<ul>
<li><p><a href="https://dataframes.juliadata.org/stable/">DataFrames.jl</a>: This package provides a powerful data manipulation and analysis tool for Julia, similar to the pandas library in Python. </p>
<ul>
<li><p>Additionally, the author of the package, Bogumił Kamiński, is an extremely prolific blogger who shares many different ways of using DataFrames.jl.</p>
</li>
</ul>
<p>I highly suggest <a href="https://bkamins.github.io">his blog</a>.</p>
</li>
<li><p><a href="https://csv.juliadata.org/stable/">CSV.jl</a>: Utility library for working with CSV and other delimited files in the Julia programming language</p>
</li>
<li><p><a href="https://github.com/ronisbr/TerminalPager.jl">TerminalPager.jl</a>: a REPL-based Julia variable and documentation explorer</p>
</li>
</ul>
<h4 id="plotting">Plotting</h4>
<p>When I first started within Julia, this was the only area I felt that was sorely lacking within the ecosystem. However, I am happy to say that this is no longer the case&#33; In my mind, the best Julia plotting package is <a href="https://makie.org">Makie.jl</a>. It is an interactive data visualization and plotting ecosystem that has support for multiple backends ranging from publication quality static images, 3D images, to fully interactive plots and visualizations. I use it whenever I can.</p>
<h3 id="conclusion">Conclusion</h3>
<blockquote>
<p><strong>NOTE:</strong> This blog post is a continuous work in progress.</p>
</blockquote>
<p>As this blog post is a continuous work in progress, please feel free to comment below on questions about how I could improve it or explain more. That said, my goal with this blog post was not to cover every aspect of the Julia ecosystem but how to quickly go from knowing nothing about programming to becoming a self-sufficient Julian. May this concise guide help you in your way to achieving all that you want within Julia.</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Resources for Learning the Julia Programming Language</em>. <a href="https://jacobzelko.com/10082023195125-julia-learning-resources">https://jacobzelko.com/10082023195125-julia-learning-resources</a>. October 8 2023.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Sun, 08 Oct 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  A Fun Exploration of Perfect, Abundant, and Deficient Numbers  ]]>
  </title>
  <link> https://jacobzelko.com/05102023043333-perfect-abundant-deficit/index.html </link>
  <guid> https://jacobzelko.com/05102023043333-perfect-abundant-deficit/index.html </guid>
  <description>
    <![CDATA[  A computational treatment and exploration of abundant and deficient numbers  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>A Fun Exploration of Perfect, Abundant, and Deficient Numbers</h1>
<p><strong>Date:</strong> May 10 2023</p>
<p><strong>Summary:</strong> A computational treatment and exploration of abundant and deficient numbers</p>
<p><strong>Keywords:</strong> #blog #abundant #deficient #number #theory #julia #programming #perfect #aliquot #sequence #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Motivation</li><li>What Are These Numbers?</li><li>Examining Divisors of These Numbers<ol><li>Abundant Numbers</li><li>Deficient Numbers</li></ol></li><li>Any Connection to Aliquot Sequences?<ol><li>Aliquot Sequences of Abundant Numbers</li><li>Aliquot Sequences of Deficient Numbers</li></ol></li><li>Conclusion</li><li>Addendums<ol><li>Discussion on Julia Implementation</li><li>Categorical Understandings of Number Species</li></ol></li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="motivation">Motivation</h3>
<p>I was at the gym working out when I started thinking about locker numbers in the men&#39;s locker room. I was reminded of perfect numbers and was thinking about perfect number examples. I started testing random numbers in my mind and noticed numbers which had divisors that summed up to greater than their number and also less than their number. I had no idea about the existence of abundant and deficient numbers and got curious about these numbers and to see what characteristics I could find about them.</p>
<h3 id="what_are_these_numbers">What Are These Numbers?</h3>
<p>In Number Theory, there exist three species of numbers that depend on the divisors of a given number &#40;excluding the number itself as a divisor&#41;. Here are the three species and their simple characteristics:</p>
<p><strong>Deficient Numbers</strong> - these numbers have divisors whose sum is never greater than the number being examined. An example is the number \(4\) which has as divisors \(1\) and \(2\) – those divisors only sum up to \(3\).</p>
<p><strong>Perfect Numbers</strong> - these numbers have divisors which sum to exactly to the number being examined. An example is the number \(6\) which has as divisors \(1, 2, 3\) which sum together to \(6\).</p>
<p><strong>Abundant Numbers</strong> - these numbers have divisors whose sum is greater than the number being examined. An example is the number \(12\) whose divisors are \(1, 2, 3, 4, 6\) and sum to \(16\).</p>
<p>As it turns out, there are infinite deficient, perfect, and abundant numbers. However, only around 50 perfect numbers have ever been discovered to this day&#33; \(6\) is the smallest perfect number but then perfect numbers grow to be hundreds of digits long&#33; For that reason, this fun exploration will really only explore abundant and deficient numbers. </p>
<h3 id="examining_divisors_of_these_numbers">Examining Divisors of These Numbers</h3>
<p>Out of curiosity, I wanted to know if there were any trends to be noticed in the divisors of the deficient and abundant number species. So, I whipped together some code to explore this within Julia &#40;if you are not interested in the code, you can skip it and just go to the results for each section&#41;. To get started, I first defined a function to calculate divisors of a number:</p>
<pre><code class="language-julia">import Primes: factorfunction divisors&#40;n&#41;    d &#61; Int64&#91;1&#93;    for &#40;p, e&#41; in factor&#40;n&#41;        t &#61; Int64&#91;&#93;
        r &#61; 1        for i in 1:e
            r *&#61; p
	    for u in d
	        push&#33;&#40;t, u * r&#41;
	    end
	end	append&#33;&#40;d, t&#41;
    end    return sort&#33;&#40;d&#41;end</code></pre>
<p>With this function defined, now, I am going to calculate some deficient and deficient numbers &#40;since perfect numbers are hard to calculate, I am going to look up a few to explore&#41;.  To do that, we will use the following snippet to find \(1000\) abundant and deficient numbers:</p>
<pre><code class="language-julia">i &#61; 1 
deficient_numbers &#61; &#91;&#93;
abundant_numbers &#61; &#91;&#93;
while true
  divisor_sum &#61; divisors&#40;i&#41;&#91;1:end-1&#93; |&gt; sum
  if divisor_sum &lt; i &amp;&amp; length&#40;deficient_numbers&#41; &#33;&#61; 1000
    push&#33;&#40;deficient_numbers, i&#41;
  elseif divisor_sum &gt; i &amp;&amp; length&#40;abundant_numbers&#41; &#33;&#61; 1000
    push&#33;&#40;abundant_numbers, i&#41;
  end  i &#43;&#61; 1  length&#40;abundant_numbers&#41; &#61;&#61; 1000 &amp;&amp; length&#40;deficient_numbers&#41; &#61;&#61; 1000 ? break : continue
end</code></pre>
<p>We are set to explore further these numbers&#33;</p>
<h4 id="abundant_numbers">Abundant Numbers</h4>
<p>As a first pass, let&#39;s calculate the divisors of the abundant numbers and plot their frequency:</p>
<pre><code class="language-julia">import DataStructures: counter
import UnicodePlots: barplotabundant_divisors &#61; vcat&#40;divisors.&#40;abundant_numbers&#41;...&#41; |&gt; counter |&gt; Dict |&gt; sort;vs &#61; collect&#40;values&#40;abundant_divisors&#41;&#41;;
ks &#61; collect&#40;keys&#40;abundant_divisors&#41;&#41;;barplot&#40;ks&#91;1:20&#93;, vs&#91;1:20&#93;, xlabel &#61; &quot;Count&quot;, ylabel &#61; &quot;Divisors&quot;, title &#61; &quot;Divisor Count for First 1000 Abundant Numbers&quot;&#41;</code></pre>
<p>Which gives the following plot:</p>
<pre><code class="language-txt">Divisor Count for First 1000 Abundant Numbers 
               ┌                                        ┐ 
             1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1 000   
             2 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 995     
             3 ┤■■■■■■■■■■■■■■■■■■■■■■ 677                
             4 ┤■■■■■■■■■■■■■■■■■■■■■ 623                 
             5 ┤■■■■■■■■■■ 308                            
             6 ┤■■■■■■■■■■■■■■■■■■■■■■ 672                
             7 ┤■■■■■■■ 216                               
             8 ┤■■■■■■■■■■■ 347                           
             9 ┤■■■■■■■■ 229                              
   Divisors 10 ┤■■■■■■■■■■ 303                            
            11 ┤■■■■ 116                                  
            12 ┤■■■■■■■■■■■ 336                           
            13 ┤■■■ 96                                    
            14 ┤■■■■■■■ 211                               
            15 ┤■■■■■ 139                                 
            16 ┤■■■■■■ 188                                
            17 ┤■■ 68                                     
            18 ┤■■■■■■■ 224                               
            19 ┤■■ 61                                     
            20 ┤■■■■■■■ 201                               
               └                                        ┘ 
                                  Count</code></pre>
<p>Without any real methodology, what I notice is that there seems to be an interesting pattern where certain divisors are being repeated more than others as more and more divisors are found. It almost feels like a kind of decaying sequence where counts seems to spike on any multiple of \(3\) or \(4\) more consistently than any other number. Even though, it seems like multiples of \(3\) are not as consistent.</p>
<h4 id="deficient_numbers">Deficient Numbers</h4>
<p>Now, let&#39;s calculate the divisors of the deficient numbers and plot their frequency:</p>
<pre><code class="language-julia">import DataStructures: counter
import UnicodePlots: barplotdeficient_divisors &#61; vcat&#40;divisors.&#40;deficient_numbers&#41;...&#41; |&gt; counter |&gt; Dict |&gt; sort;vs &#61; collect&#40;values&#40;deficient_divisors&#41;&#41;;
ks &#61; collect&#40;keys&#40;deficient_divisors&#41;&#41;;barplot&#40;ks&#91;1:20&#93;, vs&#91;1:20&#93;, xlabel &#61; &quot;Count&quot;, ylabel &#61; &quot;Divisors&quot;, title &#61; &quot;Divisor Count for First 1000 Deficient Numbers&quot;&#41;</code></pre>
<p>Which gives the following plot:</p>
<pre><code class="language-txt">Divisor Count for First 1000 Deficient Numbers 
               ┌                                        ┐ 
             1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1 000   
             2 ┤■■■■■■■■■■■ 337                           
             3 ┤■■■■■■■ 220                               
             4 ┤■■■■ 124                                  
             5 ┤■■■■■■ 168                                
             7 ┤■■■■ 119                                  
             8 ┤■■ 51                                     
             9 ┤■■ 73                                     
            10 ┤■ 36                                      
   Divisors 11 ┤■■■ 82                                    
            13 ┤■■ 71                                     
            14 ┤■ 25                                      
            15 ┤■ 43                                      
            16 ┤■ 18                                      
            17 ┤■■ 56                                     
            19 ┤■■ 50                                     
            21 ┤■ 31                                      
            22 ┤■ 22                                      
            23 ┤■ 42                                      
            25 ┤■ 33                                      
               └                                        ┘ 
                                  Count</code></pre>
<p>What&#39;s interesting here is that I did not see any immediate pattern or phenomena with these divisors at first glance. However, when I examined the plot using a log10 scale, I then saw that consistently, the counts for odd divisors for outnumber those for even divisors:</p>
<pre><code class="language-txt">Divisor Count for First 1000 Deficient Numbers 
               ┌                                        ┐ 
             1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 1 000   
             2 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 337          
             3 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■ 220            
             4 ┤■■■■■■■■■■■■■■■■■■■■■■■ 124               
             5 ┤■■■■■■■■■■■■■■■■■■■■■■■■ 168              
             7 ┤■■■■■■■■■■■■■■■■■■■■■■■ 119               
             8 ┤■■■■■■■■■■■■■■■■■■■ 51                    
             9 ┤■■■■■■■■■■■■■■■■■■■■ 73                   
            10 ┤■■■■■■■■■■■■■■■■■ 36                      
   Divisors 11 ┤■■■■■■■■■■■■■■■■■■■■■ 82                  
            13 ┤■■■■■■■■■■■■■■■■■■■■ 71                   
            14 ┤■■■■■■■■■■■■■■■ 25                        
            15 ┤■■■■■■■■■■■■■■■■■■ 43                     
            16 ┤■■■■■■■■■■■■■■ 18                         
            17 ┤■■■■■■■■■■■■■■■■■■■ 56                    
            19 ┤■■■■■■■■■■■■■■■■■■■ 50                    
            21 ┤■■■■■■■■■■■■■■■■ 31                       
            22 ┤■■■■■■■■■■■■■■■ 22                        
            23 ┤■■■■■■■■■■■■■■■■■■ 42                     
            25 ┤■■■■■■■■■■■■■■■■■ 33                      
               └                                        ┘ 
                           Count &#40;Log10 Scale&#41;</code></pre>
<h3 id="any_connection_to_aliquot_sequences">Any Connection to Aliquot Sequences?</h3>
<p>Out of curiosity, I wondered if there could be any overlap of abundant and deficient numbers&#39; divisors with their respective aliquot sequences. Now, an aliquot sequence is a rather fun thing. It has the following form:</p>
\[
s_{0} = k
\]
\[
s_{n} = s(s_{n-1}) = \sigma_{1}(s_{n-1}) - s_{n-1} \text{if} s_{n-1} \gt 0
\]
\[
s_{n} = 0 \text{if} s_{n-1} = 0
\]
<p>I decided to implement a small algorithm to compute the aliquot sequence for a given number as follows:</p>
<pre><code class="language-julia">function aliquot_sequence&#40;num; max_itrs &#61; missing&#41;
  sequence &#61; &#91;num&#93;
  s &#61; num  while true
    s &#61; sum&#40;divisors&#40;s&#41;&#41; - s
    if &#33;ismissing&#40;aliquot_sequence&#41; &amp;&amp; length&#40;sequence&#41; &#61;&#61; max_itrs
      return nothing
    elseif s &#61;&#61; 0 
      push&#33;&#40;sequence, s&#41;
      break
    elseif in&#40;s, sequence&#41;
      break
    else
      push&#33;&#40;sequence, s&#41;
    end
    
  end  return sequenceend</code></pre>
<p>In my implementation, I decided to limit the sequence to no repeating sequence values for a number. Let&#39;s plot these sequence values and see what could be seen as before.</p>
<blockquote>
<p>NOTE: As a limitation, some of these sequences have an immensely high number of iterations which cause my computer to explode &#40;looking at you, abundant number \(138\)&#41;&#33; For that reason, I am only calculating sequences for an abundant number that has only 10 maximum iterations within their aliquot sequence.</p>
</blockquote>
<h4 id="aliquot_sequences_of_abundant_numbers">Aliquot Sequences of Abundant Numbers</h4>
<p>Let&#39;s calculate the aliquot sequences for \(500\) abundant numbers that have at most \(10\) terms within their sequence:</p>
<pre><code class="language-julia">import DataStructures: counter
import UnicodePlots: barplotabundant_aliquot_sequences &#61; &#91;&#93;for i in 1:1000000
         divisor_sum &#61; divisors&#40;i&#41;&#91;1:end-1&#93; |&gt; sum
         if divisor_sum &gt; i 
           seq &#61; aliquot_sequence&#40;i, 10&#41;
           &#33;isnothing&#40;seq&#41; ? push&#33;&#40;abundant_aliquot_sequences, seq&#41; : continue
         end         i &#43;&#61; 1         length&#40;abundant_aliquot_sequences&#41; &#61;&#61; 500 ? break : continue
         
       end
        
abundant_aliquot_terms &#61; vcat&#40;abundant_aliquot_sequences...&#41; |&gt; counter |&gt; Dict |&gt; sort;vs &#61; collect&#40;values&#40;abundant_aliquot_terms&#41;&#41;;
ks &#61; collect&#40;keys&#40;abundant_aliquot_terms&#41;&#41;;barplot&#40;ks&#91;1:20&#93;, vs&#91;1:20&#93;, xlabel &#61; &quot;Count&quot;, ylabel &#61; &quot;Terms&quot;, title &#61; &quot;Aliquot Term Count for 500 Abundant Numbers&quot;&#41;</code></pre>
<p>Which yields the plot:</p>
<pre><code class="language-txt">Aliquot Term Count for 500 Abundant Numbers 
            ┌                                        ┐ 
          0 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 448   
          1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 448   
          3 ┤ 3                                        
          4 ┤ 3                                        
          6 ┤ 3                                        
          7 ┤■ 9                                       
          8 ┤■ 9                                       
          9 ┤ 3                                        
         10 ┤ 1                                        
   Terms 11 ┤ 4                                        
         12 ┤ 1                                        
         13 ┤■ 11                                      
         14 ┤ 1                                        
         15 ┤ 3                                        
         16 ┤ 1                                        
         17 ┤ 3                                        
         18 ┤ 2                                        
         19 ┤■ 8                                       
         20 ┤ 1                                        
         21 ┤ 4                                        
            └                                        ┘ 
                               Count</code></pre>
<p>Here, I really cannot discern any relatable pattern as well as significance that can be tied back to abundant numbers. I am not sure if there is a way to tie significance back to abundant numbers at all in this scenario.</p>
<h4 id="aliquot_sequences_of_deficient_numbers">Aliquot Sequences of Deficient Numbers</h4>
<p>Let&#39;s calculate the aliquot sequences for \(500\) abundant numbers that have at most \(10\) terms within their sequence:</p>
<pre><code class="language-julia">import DataStructures: counter
import UnicodePlots: barplotdeficient_aliquot_sequences &#61; &#91;&#93;for i in 1:1000000
         divisor_sum &#61; divisors&#40;i&#41;&#91;1:end-1&#93; |&gt; sum
         if divisor_sum &lt; i 
           seq &#61; aliquot_sequence&#40;i, 10&#41;
           &#33;isnothing&#40;seq&#41; ? push&#33;&#40;deficient_aliquot_sequences, seq&#41; : continue
         end         i &#43;&#61; 1         length&#40;deficient_aliquot_sequences&#41; &#61;&#61; 500 ? break : continue
         
       end
        
deficient_aliquot_terms &#61; vcat&#40;deficient_aliquot_sequences...&#41; |&gt; counter |&gt; Dict |&gt; sort;vs &#61; collect&#40;values&#40;deficient_aliquot_terms&#41;&#41;;
ks &#61; collect&#40;keys&#40;deficient_aliquot_terms&#41;&#41;;barplot&#40;ks&#91;1:20&#93;, vs&#91;1:20&#93;, xlabel &#61; &quot;Count&quot;, ylabel &#61; &quot;Terms&quot;, title &#61; &quot;Aliquot Term Count for 500 Deficient Numbers&quot;&#41;</code></pre>
<p>Which yields the plot:</p>
<pre><code class="language-txt">Aliquot Term Count for 500 Deficient Numbers 
            ┌                                        ┐ 
          0 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 487   
          0 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 487   
          1 ┤■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■ 487   
          2 ┤ 1                                        
          3 ┤■■ 28                                     
          4 ┤■■ 27                                     
          5 ┤ 1                                        
          6 ┤■ 10                                      
          7 ┤■■ 24                                     
          8 ┤■■ 23                                     
   Terms  9 ┤■■ 26                                     
         10 ┤■ 10                                      
         11 ┤■ 17                                      
         12 ┤ 2                                        
         13 ┤■ 15                                      
         14 ┤■ 9                                       
         15 ┤■■ 25                                     
         16 ┤■ 7                                       
         17 ┤■ 13                                      
         18 ┤ 1                                        
         19 ┤■■ 25                                     
            └                                        ┘ 
                               Count</code></pre>
<p>Again, I really cannot discern any relatable pattern as well as significance that can be tied back to deficient numbers.</p>
<h3 id="conclusion">Conclusion</h3>
<p>This was a small exploration that I wanted to do of these numbers to see if I could find any patterns or significance within aspects of these numbers.  It seems like there may be some present within the factors of abundant and deficient numbers, but when looking at their corresponding aliquot sequences, I am unable to determine anything from a computational sense.  To that end, I was also curious about how effective computation can be in helping to derive or provide hints about what may underlie these numbers. In short, it would appear that computation is quite helpful to give rise to initial questions. For example, I&#39;d be curious to what extent the patterns I noticed within abundant and deficient numbers prolong for and if they are actually legitimate observations. At that point, one could then start applying basic data science skills to group, explore, and summarize potential trends within these numbers.</p>
<p>For now, my curiosity is sated and it might be worth a return to in the future. One thing this blog post did make me think about is analogies. The idea of deficient, perfect, and abundant numbers are really fascinating as it lends itself to analogs within set theory relationships &#40;like many-to-one -&gt; deficient number, one-to-one -&gt; perfect number, one-to-many -&gt; abundant number&#41;. I wonder if it could be used as analogy outside of mathematics strictly and in terms like healthcare &#40;sub-type of a disease -&gt; deficient number, canonical disease diagnosis -&gt; perfect number, disease family -&gt; abundant number&#41;. Might be worth further exploration in the future.</p>
<h3 id="addendums">Addendums</h3>
<h4 id="discussion_on_julia_implementation">Discussion on Julia Implementation</h4>
<p>There was a <a href="https://discourse.julialang.org/t/blog-post-a-fun-exploration-of-perfect-abundant-and-deficient-numbers/99168/4">nice discussion</a> from within the Julia Discourse about this post talking about implementation details of some of the functions I was using and how to handle large numbers in computation. In particular, there was suggestion on using types like <code>BigInt</code> or <code>BigFloat</code> to handle these large numbers &#40;such as the 8th perfect number&#41;. Interestingly, to calculate divisors, one user &#40;gtgt&#41; suggested the following approach which was quite beyond my thinking to calculate divisors for a given value. Here was their approach:</p>
<blockquote>
<p>You can use the fact that if \(n = \prod p_{i}^{e_{i}}\) then \(\sigma{n} = \prod \frac{p_{i}^{e_{i} - 1} - 1}{p_{i} - 1}\) to avoid allocating a vector to store the divisors.</p>
</blockquote>
<p>This was then followed by a programming implementation:</p>
<pre><code class="language-julia">using Primesfunction sum_divisors&#40;n&#41;
    s &#61; one&#40;n&#41;
    for &#40;p, e&#41; in Primes.factor&#40;n&#41;
         s *&#61; &#40;p^&#40;e &#43; 1&#41; - 1&#41; ÷ &#40;p - 1&#41;
    end
    s
endfunction get_abundant_and_deficient_numbers&#40;n::T&#41; where T &lt;: Integer
    # get the first n abundant and deficient numbers
    n_abundants &#61; 0
    n_deficients &#61; 0    abundants &#61; sizehint&#33;&#40;T&#91;&#93;, n&#41;
    deficients &#61; sizehint&#33;&#40;T&#91;&#93;, n&#41;    k &#61; 1
    while n_abundants &lt; n || n_deficients &lt; n
         σ &#61; sum_divisors&#40;k&#41;
         if σ &gt; 2k &amp;&amp; n_abundants &lt; n
             n_abundants &#43;&#61; 1
             push&#33;&#40;abundants, k&#41;
        elseif σ &lt; 2k &amp;&amp; n_deficients &lt; n
             n_deficients &#43;&#61; 1
             push&#33;&#40;deficients, k&#41;
        end        k &#43;&#61; 1
    end    abundants, deficients
end</code></pre>
<p>I haven&#39;t had a chance to test that new implementation but I would imagine, being that it is far more type stable, that it would be more efficient. However, I still feel like we need to have safeguards for large number computation.</p>
<h4 id="categorical_understandings_of_number_species">Categorical Understandings of Number Species</h4>
<p>Within the Category Theory Zulip community, <a href="https://categorytheory.zulipchat.com/#narrow/stream/266967-general.3A-mathematics/topic/.5BBlog.5D.20Exploration.20of.20Perfect.2C.20Abundant.2C.20and.20Deficient.20Nums">there was another great discussion</a> about viewing these number species through the lens of categories.</p>
<p>David Egolf and John Carlos Baez had some fantastic ideas within that discussion that I&#39;ll excerpt here: </p>
<blockquote>
<p>David: &#91;I&#93; wonder if the concepts of &quot;deficient&quot;, &quot;perfect&quot; and &quot;abundant&quot; generalize to certain kinds of categories. I suppose what we would need is:</p>
<ul>
<li><p>a way to say if one object is a divisor of another object</p>
</li>
<li><p>a way to add objects</p>
</li>
<li><p>a way to compare the size of objects</p>
</li>
</ul>
</blockquote>
<blockquote>
<p>If we have the three things above available to us, then we can</p>
</blockquote>
<p>describe an object \(A\) as &quot;abundant&quot; if the sum of its divisor  objects is larger than \(A\).</p>
<blockquote>
<p>&#91;...&#93; Here&#39;s an initial idea for &quot;categorifying&quot; the above list of three requirements, in a category with coproducts: </p>
<ul>
<li><p>Say that \(A\) divides \(B\) if the coproduct of \(A\) with itself some finite number of times is isomorphic to \(B\)</p>
</li>
<li><p>Let the sum of two objects be their coproduct &#40;so the sum is defined up to isomorphism&#41;</p>
</li>
<li><p>Say that \(A \leq B\) if there is a monomorphism from \(A\) to \(B\)</p>
</li>
</ul>
<p>Applying this to the category of finite sets I think gives us something similar to the usual notions of divisiblity, addition, and ordering for the natural numbers. Another approach for divisibility might be, in a category with products:</p>
<ul>
<li><p>Say that \(A\) divides \(B\) if there exists some \(C\) so that the product of \(A\) and \(C\) is isomorphic to \(B\)</p>
</li>
</ul>
<p>John: Both these approaches work, in the sense that starting from the category of finite sets and functions we get the usual concept of divisibility for natural numbers.</p>
</blockquote>
<p>I encourage you to go see the rest of that discussion there if you found this perspective interesting&#33; There was a lot more spoken of there, but I found this really fascinating. For me, my category theoretic skills still are not up to par just yet to track everything David and John are saying, so I am leaving these excerpts here for future reference to perhaps come back to this.</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>A Fun Exploration of Perfect, Abundant, and Deficient Numbers</em>. <a href="https://jacobzelko.com/05102023043333-perfect-abundant-deficit">https://jacobzelko.com/05102023043333-perfect-abundant-deficit</a>. May 10 2023.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Wed, 10 May 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Asynchronous Workflow Using Julia Tutorial  ]]>
  </title>
  <link> https://jacobzelko.com/01082023043553-julia-async-workflow/index.html </link>
  <guid> https://jacobzelko.com/01082023043553-julia-async-workflow/index.html </guid>
  <description>
    <![CDATA[  A thorough tutorial on how to use Julia for asynchronous workflows to do many things, at once&#33;  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Asynchronous Workflow Using Julia Tutorial</h1>
<p><strong>Date:</strong> January 7 2023</p>
<p><strong>Summary:</strong> A thorough tutorial on how to use Julia for asynchronous workflows to do many things, at once&#33;</p>
<p><strong>Keywords:</strong> #blog #archive #julia #programming #literate #workflow #asynchronous #weave #browser #sync #node</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Motivation</li><li>Set-Up</li><li>Simple Workflow Process<ol><li>Blocking Workflow</li><li>Asynchronous Workflow</li></ol></li><li>Asynchronous Workflow for Literate Programming</li><li>Conclusion</li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="motivation">Motivation</h3>
<p>I sometimes find myself wanting to execute a Julia file I have just edited.  This is different than what the excellent <a href="https://github.com/timholy/Revise.jl">Revise.jl package &#40;created by Tim Holy&#41;</a> does in that I want to execute the full file and not just update function definitions. Moreover, I may just want Julia to do something else entirely upon updating a file or directory. This can be very helpful in analysis workflows as well as literate programming. Creating an extended post on my process for this was inspired by a <a href="https://discourse.julialang.org/t/franklin-jl-automatically-evaluate-jl-file-on-change/92580/6">Julia Discourse post I provided an answer to</a>.</p>
<h3 id="set-up">Set-Up</h3>
<p>Here is how I recommend setting up your Julia environment to follow this tutorial &#40;I assume you have Julia installed correctly&#41;:</p>
<ol>
<li><p>Create an empty directory &#40;folder&#41; somewhere on your computer. &#40;NOTE: For sake of this tutorial, I will refer to it as the &quot;test&quot; folder&#41;.</p>
</li>
<li><p>Within your favorite text editor &#40;like Notepad, Vim, VSCode, etc.&#41;, open this directory.</p>
</li>
<li><p>Open and create a file called &quot;tmp.jmd&quot; &#40;NOTE: Keep the file and your editor open as we will be coming back to this file quite a lot&#41;.</p>
</li>
<li><p>Open your Julia REPL within the directory and activate a temporary environment within package mode:</p>
</li>
</ol>
<pre><code class="language-julia-repl">pkg&gt; activate --temp</code></pre>
<ol start="5">
<li><p>Add into this temporary environment the following packages:</p>
</li>
</ol>
<pre><code class="language-julia-repl">pkg&gt; add FileWatching, Weave</code></pre>
<ol start="6">
<li><p>Install node onto your machine.</p>
</li>
</ol>
<p>I suggest using the great tool, <a href="https://github.com/nvm-sh/nvm"><code>nvm</code>, which allows easy management of node versions</a>.</p>
<ol start="7">
<li><p>Install the node package, <a href="https://www.npmjs.com/package/browser-sync"><code>browser-sync</code>, which allows for syncing of webpages based on updates</a>.</p>
</li>
</ol>
<p>Here is the command you can use in your command line: </p>
<pre><code class="language-sh">npm i -g browser-sync</code></pre>
<blockquote>
<p>NOTE: Steps 6 and 7 are not necessary if you are not interested in the section on literate programming</p>
</blockquote>
<h3 id="simple_workflow_process">Simple Workflow Process</h3>
<p>There are two ways to start this workflow.  One blocking &#40;i.e. you cannot use the Julia REPL while working&#41; and another spawning an asynchronous background process to enable you to work with the same REPL. Here is gif showing these workflows in action:</p>
<p><img src="assets/01082023043553-watching-example.gif" alt="" /></p>
<h4 id="blocking_workflow">Blocking Workflow</h4>
<p>This creates a synchronous task in your Julia REPL that can then run whatever command you want while you monitor a specific file &#40;or folder&#41;. In this case, I am making the task print a statement that says “Change Detected&#33;” to my REPL whenever there is a change in the file called “tmp.jmd”.</p>
<pre><code class="language-julia">using FileWatchingwhile true 
    watch_file&#40;&quot;./tmp.jmd&quot;&#41;
    println&#40;&quot;Change Detected&#33;&quot;&#41;
end</code></pre>
<p>This workflow is not optimal as this loop continues and locks your REPL from doing anything else. </p>
<h4 id="asynchronous_workflow">Asynchronous Workflow</h4>
<p>This creates an asynchronous task in the background of your Julia REPL that can then run whatever command you want while you monitor a specific file &#40;or folder&#41;. In this case, I am making the task print a statement that says “Change Detected&#33;” to my REPL whenever there is a change in the file called “tmp.jmd”.</p>
<pre><code class="language-julia">using FileWatching@async while true 
    watch_file&#40;&quot;./tmp.jmd&quot;&#41;
    println&#40;&quot;Change Detected&#33;&quot;&#41;
end</code></pre>
<p>From here, you could then still interact with this REPL while this task is running in the background. Furthermore, you can change the line that says <code>println&#40;&quot;Change Detected&#33;&quot;&#41;</code> to whatever command &#40;or commands&#41; you want to trigger.</p>
<h3 id="asynchronous_workflow_for_literate_programming">Asynchronous Workflow for Literate Programming</h3>
<p>This workflow allows one to work with a Julia Markdown document with <code>Weave.jl</code> to preview your work in real time.  There a few steps to start the workflow but here is how it looks when in operation:</p>
<p><img src="assets/01082023043553-weave-example.gif" alt="" /></p>
<p>First, execute the following snippet in your Julia REPL to start the asynchronous process to watch for changes and tell Julia to weave the file we will modify:</p>
<pre><code class="language-julia">using FileWatching
using Weave@async while true 
    watch_file&#40;&quot;./tmp.jmd&quot;&#41;
    weave&#40;&quot;./tmp.jmd&quot;&#41;
end</code></pre>
<p>Next, run this in a separate terminal:</p>
<pre><code class="language-sh">browser-sync start --server --start --file &quot;./*.html&quot;</code></pre>
<p>or this command within your Julia REPL &#40;NOTE: This will make your REPL session very cluttered but you can still use your REPL&#41;:</p>
<pre><code class="language-julia">@async run&#40;&#96;browser-sync start --server --start --file &quot;./*.html&quot;&#96;&#41;</code></pre>
<p>At this point, you should see <code>browser-sync</code> spit out a lot of information that looks something like this:</p>
<pre><code class="language-sh">&#91;Browsersync&#93; Access URLs:
 --------------------------------------
       Local: http://localhost:3000
    External: http://192.168.1.186:3000
 --------------------------------------
          UI: http://localhost:3001
 UI External: http://localhost:3001
 --------------------------------------
&#91;Browsersync&#93; Serving files from: ./</code></pre>
<p>You&#39;ll want to grab that URL that looks like <code>http://localhost:3000</code> in the <code>Local</code> spot and then open that in your web browser.  With the URL that you get &#40;it could be on a different port&#41;, navigate to <code>http://localhost:3000/tmp.html</code>.</p>
<p>Finally, when you have this all in place, go ahead and add this code block into the <code>tmp.jmd</code> file that was created:</p>
<pre><code class="language-markdown"># Hello World This is a Julia Markdown file. &#96;&#96;&#96;julia 
2 &#43; 2
&#96;&#96;&#96;</code></pre>
<p>You should see a few things happen.  You&#39;ll see a few messages from the Julia REPL stating that <code>Weave.jl</code> is weaving your document to your desired output. Then, you&#39;ll see <code>browser-sync</code> say something about updating or syncing.  Finally, you will see your browser update to the latest version of your weaved document. </p>
<p>Feel free to play around with this more and see the dynamism of the workflow&#33; I tend to do this when I am iteratively developing reports within Julia and want to tinker within the REPL at the same time I am creating documents. Having to wait for rendering <code>Weave.jl</code> documents and the like was a pain and this took the pain away.</p>
<h3 id="conclusion">Conclusion</h3>
<p>I hope you appreciated this post&#33; If you have any suggestions, comments, or additional workflows this could be used for, please comment below.  May your Julia sessions now be even more supercharged&#33;</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Asynchronous Workflow Using Julia Tutorial</em>. <a href="https://jacobzelko.com/01082023043553-julia-async-workflow">https://jacobzelko.com/01082023043553-julia-async-workflow</a>. January 7 2023.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Sat, 07 Jan 2023 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  A Beginner&#39;s to Master&#39;s Guide in Learning Lua  ]]>
  </title>
  <link> https://jacobzelko.com/10012022184345-learning-lua/index.html </link>
  <guid> https://jacobzelko.com/10012022184345-learning-lua/index.html </guid>
  <description>
    <![CDATA[  My notes on learning the Lua programming language  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>A Beginner&#39;s to Master&#39;s Guide in Learning Lua</h1>
<p><strong>Date:</strong> October 1 2022</p>
<p><strong>Summary:</strong> My notes on learning the Lua programming language</p>
<p><strong>Keywords:</strong> #archive #lua #quick #start #programming</p>
<h1>Bibliography</h1>
<p>https://github.com/medwatt/Notes/blob/main/Lua/Lua<em>Quick</em>Guide.ipynb</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Reading Motivation</li><li>Comments</li><li>Variable Scope<ol><li>Global Scope</li><li>Local Scope</li></ol></li><li>Variable Assignments</li><li>Variable Types</li><li>Math Operators</li><li>Relational Operators</li><li>Logical Operators</li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="reading_motivation">Reading Motivation</h3>
<p>I wanted to learn Lua for no other reason than to program my own workflow in neovim. Also, Lua is cool and Just-in-Time compiled like Julia&#33; Plus, it is used for game development so if ever this research thing doesn&#39;t work out, backup plan: become a game developer.</p>
<h3 id="comments">Comments</h3>
<p>How to write comments within Lua&#33;</p>
<pre><code class="language-lua">-- This is my comment&#33; --&#91;&#91; 
	This
	is 
	a 
	multiline 
	comment&#33; 
--&#93;&#93;</code></pre>
<h3 id="variable_scope">Variable Scope</h3>
<h4 id="global_scope">Global Scope</h4>
<p>All variables within lua are considered global by default. Moreover, each call or line within a lua script is run as a chunk.</p>
<pre><code class="language-lua">Var &#61; 10
print&#40; &quot;Global var:&quot;, Var &#41;</code></pre>
<h4 id="local_scope">Local Scope</h4>
<p>To define a large chunk where variables are local in scope, one can create a local scope using a do-end block </p>
<pre><code class="language-lua">do
	local Var &#61; 20
	print&#40; &quot;Local Var:&quot;, Var &#41;
end</code></pre>
<h3 id="variable_assignments">Variable Assignments</h3>
<pre><code class="language-lua">A &#61; A &#43; 1 -- This works 
A &#43;&#61; 1 -- This does not work B &#61; 0 -- This works
C &#61; 0 -- This works
B, C &#61; 0, 0 -- This works
B &#61; C &#61; 0 -- This does not work</code></pre>
<h3 id="variable_types">Variable Types</h3>
<p>There are eight basic types within Lua: </p>
<ul>
<li><p><code>nil</code> - represents absence of data</p>
</li>
<li><p><code>boolean</code></p>
</li>
<li><p><code>number</code> - <code>integer</code> and <code>float</code> both exist as alternative subtypes of <code>number</code></p>
</li>
<li><p><code>string</code></p>
</li>
<li><p><code>userdata</code></p>
</li>
<li><p><code>function</code></p>
</li>
<li><p><code>thread</code></p>
</li>
<li><p><code>table</code></p>
</li>
</ul>
<pre><code class="language-lua">print&#40; type&#40;&quot;Hello&quot;&#41; &#41; -- string 
print&#40; type&#40;10.4 * 3&#41; &#41; -- number 
print&#40; type&#40;&#123;1, 2, 3&#125;&#41; &#41; -- table
print&#40; type&#40;print&#41; &#41; -- function 
print&#40; type&#40;true&#41; &#41; -- boolean 
print&#40; type&#40;nil&#41; &#41; -- nil</code></pre>
<blockquote>
<p>NOTE: Arithmetic operations applied to an object of type <code>string</code> will not fail but instead Lua will attempt to convert that object to a <code>number</code> type.  Vice-versa to this is that if a object of type <code>number</code> is used in a <code>string</code> operation, Lua will attempt to convert that object to a <code>string</code>.</p>
</blockquote>
<h3 id="math_operators">Math Operators</h3>
<pre><code class="language-lua">A &#61; 100
B &#61; 2 print&#40; A &#43; B &#41; -- Addition
print&#40; A - B &#41; -- Subtraction 
print&#40; A * B &#41; -- Multiplication
print&#40; A ^ B &#41; -- Exponents 
print&#40; A / B &#41; -- Division
print&#40; A // B &#41; -- Floor
print&#40; A &#37; B &#41; -- Modulus
print&#40; -A &#41; -- Negation</code></pre>
<h3 id="relational_operators">Relational Operators</h3>
<pre><code class="language-lua">A &#61; 20
B &#61; 4print&#40;A &#61;&#61; B&#41; -- false
print&#40;A ~&#61; B&#41; -- true
print&#40;A &gt; B&#41; -- true
print&#40;A &lt; B&#41; -- false
print&#40;A &gt;&#61; B&#41; -- true
print&#40;A &lt;&#61; B&#41; -- false</code></pre>
<h3 id="logical_operators">Logical Operators</h3>
<pre><code class="language-lua">print&#40;true and 10&#41; -- evaluates to &#96;10&#96;
print&#40;10 and true&#41; -- evaluates &#96;true&#96;
print&#40;false and 10&#41; -- short circuits to &#96;false&#96;
print&#40;false or 10&#41; -- evaluates to &#96;10&#96;
print&#40;nil and 10&#41; -- evaluates to &#96;nil&#96;
print&#40;nil or 10&#41; -- evaluates to &#96;10&#96;
print&#40;false and nil&#41; -- evaluates to &#96;false&#96;
print&#40;false and not&#40;nil&#41;&#41; -- evaluates to &#96;false&#96;</code></pre>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>A Beginner&#39;s to Master&#39;s Guide in Learning Lua</em>. <a href="https://jacobzelko.com/10012022184345-learning-lua">https://jacobzelko.com/10012022184345-learning-lua</a>. October 1 2022.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Sat, 01 Oct 2022 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Setting Up Julia LSP for Neovim  ]]>
  </title>
  <link> https://jacobzelko.com/08312022162228-julia-lsp-setup/index.html </link>
  <guid> https://jacobzelko.com/08312022162228-julia-lsp-setup/index.html </guid>
  <description>
    <![CDATA[  An explanation of how to setup the Julia LSP for Neovim  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Setting Up Julia LSP for Neovim</h1>
<p><strong>Date:</strong> August 31 2022</p>
<p><strong>Summary:</strong> An explanation of how to setup the Julia LSP for Neovim</p>
<p><strong>Keywords:</strong> ##summary #neovim #julia #programming #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>General Guide</li></ol></li><li>How To Cite</li><li>References</li><li>Discussion: </li></ol></div>
<h3 id="general_guide">General Guide</h3>
<p>This is from Fredrik Ekre at the <a href="https://discourse.julialang.org/t/neovim-languageserver-jl/37286/72?u&#61;thecedarprince">Julia Discourse</a> with some minimal changes and notes from me:</p>
<p>LanguageServer is somewhat slow to start so it is very useful to use a custom sysimage using PackageCompiler to reduce this time. On my machine I get the first response after 20&#43; seconds, but with a custom sysimage I can execute LS commands instantaneously.</p>
<p>Here is my setup:</p>
<ol>
<li><p>Install <code>Mason.nvim</code> or <code>nvim-lspconfig</code> and install <code>julials</code> &#40;it may also be called something like Julia Language Server Protocol&#41;.</p>
</li>
<li><p>Modify <code>init.vim</code> or <code>init.lua</code> to use a custom Julia executable &#40;if it exists&#41;:</p>
</li>
</ol>
<pre><code class="language-lua">require&#39;lspconfig&#39;.julials.setup&#123;
    on_new_config &#61; function&#40;new_config, _&#41;
        local julia &#61; vim.fn.expand&#40;&quot;~/.julia/environments/nvim-lspconfig/bin/julia&quot;&#41;
        if require&#39;lspconfig&#39;.util.path.is_file&#40;julia&#41; then
	    vim.notify&#40;&quot;Hello&#33;&quot;&#41;
            new_config.cmd&#91;1&#93; &#61; julia
        end
    end
&#125;</code></pre>
<p>&#40;OPTIONAL&#41; If you use Packer to manage your vim setup, run <code>PackerCompile</code>.</p>
<p>NOTE: If you notice, there is a small line named <code>vim.notify&#40;&quot;Hello&#33;&quot;&#41;</code>. This is to test that <code>julials</code> is engaged when accessing a Julia file - you can check that it is engaged by writing <code>:messages</code> in vim. You should see &quot;Hello&#33;&quot; appear. This line can then safely be removed. </p>
<ol start="3">
<li><p>Create the <code>nvim-lspconfig</code> Julia environment by running the following in your shell:</p>
</li>
</ol>
<pre><code class="language-sh">julia --project&#61;~/.julia/environments/nvim-lspconfig -e &#39;using Pkg; Pkg.add&#40;&quot;LanguageServer&quot;&#41;&#39;</code></pre>
<p>And then navigate to the directory at <code>~.julia/environment/nvim-lspconfig</code>.</p>
<ol start="3">
<li><p>Copy the following makefile &#40;<a href="https://github.com/fredrikekre/.dotfiles/blob/master/.julia/environments/nvim-lspconfig/Makefile">courtesy of Fredrik Ekre</a>&#41; the <code>nvim-lspconfig</code> directory with the name <code>makefile</code>:</p>
</li>
</ol>
<pre><code class="language-make"># MIT License. Copyright &#40;c&#41; 2021 Fredrik Ekre
#
# This Makefile can be used to build a custom Julia system image for LanguageServer.jl to
# use with neovims built in LSP support. An up-to date version of this Makefile can be found
# at https://github.com/fredrikekre/.dotfiles/blob/master/.julia/environments/nvim-lspconfig/Makefile
#
# Usage instructions:
#
#   1. Update the neovim configuration to use a custom julia executable. If you use
#      nvim-lspconfig &#40;recommended&#41; you can modify the setup call to the following:
#
#          require&#40;&quot;lspconfig&quot;&#41;.julials.setup&#40;&#123;
#              on_new_config &#61; function&#40;new_config, _&#41;
#                  local julia &#61; vim.fn.expand&#40;&quot;~/.julia/environments/nvim-lspconfig/bin/julia&quot;&#41;
#                  if require&#40;&quot;lspconfig&quot;&#41;.util.path.is_file&#40;julia&#41; then
#                      new_config.cmd&#91;1&#93; &#61; julia
#                  end
#              end,
#              -- ...
#          &#125;&#41;
#
#   2. Place this Makefile in ~/.julia/environments/nvim-lspconfig &#40;create the directory if
#      it doesn&#39;t already exist&#41;.
#
#   3. Change directory to ~/.julia/environments/nvim-lspconfig and run &#96;make&#96;. This will
#      start up neovim in a custom project with a julia process that recods compiler
#      statements. Follow the instructions in the opened source file, and then exit neovim.
#
#   4. Upon exiting neovim PackageCompiler.jl will compile a custom system image which will
#      automatically be used whenever you work on Julia projects in neovim.
#
# Update instructions:
#
#  To update the system image &#40;e.g. when upgrading Julia or upgrading LanguageServer.jl or
#  it&#39;s dependencies&#41; run the following commands from the
#  ~/.julia/environments/nvim-lspconfig directory:
#
#      julia --project&#61;. -e &#39;using Pkg; Pkg.update&#40;&#41;&#39;
#      makeJULIA&#61;&#36;&#40;shell which julia&#41;
JULIA_PROJECT&#61;
SRCDIR:&#61;&#36;&#40;shell dirname &#36;&#40;abspath &#36;&#40;firstword &#36;&#40;MAKEFILE_LIST&#41;&#41;&#41;&#41;
ifeq &#40;&#36;&#40;shell uname -s&#41;,Linux&#41;
	SYSIMAGE&#61;languageserver.so
else
	SYSIMAGE&#61;languageserver.dylib
endifdefault: &#36;&#40;SYSIMAGE&#41;&#36;&#40;SYSIMAGE&#41;: Manifest.toml packagecompiler/Manifest.toml packagecompiler/precompile_statements.jl
	JULIA_LOAD_PATH&#61;&#36;&#123;PWD&#125;:&#36;&#123;PWD&#125;/packagecompiler:@stdlib &#36;&#123;JULIA&#125; -e &#39;using PackageCompiler; PackageCompiler.create_sysimage&#40;:LanguageServer, sysimage_path&#61;&quot;&#36;&#40;SYSIMAGE&#41;&quot;, precompile_statements_file&#61;&quot;packagecompiler/precompile_statements.jl&quot;&#41;&#39;Manifest.toml: Project.toml
	JULIA_LOAD_PATH&#61;&#36;&#123;PWD&#125;/Project.toml:@stdlib &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.instantiate&#40;&#41;&#39;Project.toml:
	JULIA_LOAD_PATH&#61;&#36;&#123;PWD&#125;/Project.toml:@stdlib &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.add&#40;&quot;LanguageServer&quot;&#41;&#39;packagecompiler/Manifest.toml: packagecompiler/Project.toml
	JULIA_LOAD_PATH&#61;&#36;&#123;PWD&#125;/packagecompiler/Project.toml:@stdlib &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.instantiate&#40;&#41;&#39;packagecompiler/Project.toml:
	mkdir -p packagecompiler
	JULIA_LOAD_PATH&#61;&#36;&#123;PWD&#125;/packagecompiler/Project.toml:@stdlib &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.add&#40;&quot;PackageCompiler&quot;&#41;&#39;packagecompiler/precompile_statements.jl: Manifest.toml bin/julia
	TMPDIR&#61;&#36;&#40;shell mktemp -d&#41; &amp;&amp; \
	cd &#36;&#36;&#123;TMPDIR&#125; &amp;&amp; \
	JULIA_LOAD_PATH&#61;: &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.generate&#40;&quot;Example&quot;&#41;&#39; 2&gt; /dev/null &amp;&amp; \
	cd Example &amp;&amp; \
	JULIA_LOAD_PATH&#61;&#36;&#36;&#123;PWD&#125;:@stdlib &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.add&#40;&#91;&quot;JSON&quot;, &quot;fzf_jll&quot;, &quot;Random&quot;, &quot;Zlib_jll&quot;&#93;&#41;&#39; 2&gt; /dev/null &amp;&amp; \
	JULIA_LOAD_PATH&#61;&#36;&#36;&#123;PWD&#125;:@stdlib &#36;&#123;JULIA&#125; -e &#39;using Pkg; Pkg.precompile&#40;&#41;&#39; 2&gt; /dev/null &amp;&amp; \
	echo &quot;&#36;&#36;PACKAGE_CONTENT&quot; &gt; src/Example.jl &amp;&amp; \
	JULIA_TRACE_COMPILE&#61;1 nvim src/Example.jl &amp;&amp; \ # NOTE: You may need to check that neovim is correctly on your path
	rm -rf &#36;&#36;&#123;TMPDIR&#125;bin/julia:
	mkdir -p bin
	echo &quot;&#36;&#36;JULIA_SHIM&quot; &gt; &#36;@
	chmod &#43;x &#36;@clean:
	rm -rf &#36;&#40;SYSIMAGE&#41; packagecompiler bin.PHONY: clean defaultexport JULIA_SHIM
define JULIA_SHIM
#&#33;/bin/bash
JULIA&#61;&#36;&#123;JULIA&#125;
if &#91;&#91; &#36;&#36;&#123;JULIA_TRACE_COMPILE&#125; &#61; &quot;1&quot; &#93;&#93;; then
    exec &#36;&#36;&#123;JULIA&#125; --trace-compile&#61;&#36;&#123;PWD&#125;/packagecompiler/precompile_statements.jl &quot;&#36;&#36;@&quot;
elif &#91;&#91; -f &#36;&#123;PWD&#125;/&#36;&#40;SYSIMAGE&#41; &#93;&#93;; then
    exec &#36;&#36;&#123;JULIA&#125; --sysimage&#61;&#36;&#123;PWD&#125;/&#36;&#40;SYSIMAGE&#41; &quot;&#36;&#36;@&quot;
else
    exec &#36;&#36;&#123;JULIA&#125; &quot;&#36;&#36;@&quot;
fi
endefexport PACKAGE_CONTENT
define PACKAGE_CONTENT
# This file is opened in neovim with a LanguageServer.jl process that records Julia
# compilation statements for creating a custom sysimage.
#
# This file has a bunch of linter errors which will exercise the linter and record
# statements for that. When the diagnostic messages corresponding to those errors show up in
# the buffer the language server should be ready to accept other commands &#40;note: this may
# take a while -- be patient&#41;. Here are some suggestions for various LSP functionality that
# can be exercised &#40;your regular keybindings should work&#41;:
#
#  - :lua vim.lsp.buf.hover&#40;&#41;
#  - :lua vim.lsp.buf.definition&#40;&#41;
#  - :lua vim.lsp.buf.references&#40;&#41;
#  - :lua vim.lsp.buf.rename&#40;&#41;
#  - :lua vim.lsp.buf.formatting&#40;&#41;
#  - :lua vim.lsp.buf.formatting_sync&#40;&#41;
#  - :lua vim.lsp.buf.code_action&#40;&#41;
#  - Tab completion &#40;if you have set this up using LSP&#41;
#  - ...
#
# When you are finished, simply exit neovim and PackageCompiler.jl will use all the recorded
# statements to create a custom sysimage. This sysimage will be used for the language server
# process in the future, and should result in almost instant response.module Exampleimport JSON
import fzf_jll
using Random
using Zlib_jllfunction hello&#40;who, notused&#41;
    println&#40;&quot;hello&quot;, who&#41;
    shuffle&#40;&#91;1, 2, 3&#93;&#41;
   shoffle&#40;&#91;1, 2, 3&#93;&#41;
    fzzf &#61; fzf_jll.fzzf&#40;&#41;
    fzf &#61; fzf_jll.fzf&#40;1&#41;
    JSON.print&#40;stdout, Dict&#40;&quot;hello&quot; &#61;&gt; &#91;1, 2, 3&#93;&#41;, 2, 123&#41;
    JSON.print&#40;stdout, Dict&#40;&quot;hello&quot; &#61;&gt; &#91;1, 2, 3&#93;&#41;&#41;
    hi&#40;who&#41;
    return Zlib_jll.libz
endfunction world&#40;s&#41;
    if s &#61;&#61; nothing
      hello&#40;s&#41;
  else
      hello&#40;s&#41;
  end
    x &#61; &#91;1, 2, 3&#93;
    for i in 1:length&#40;x&#41;
        println&#40;x&#91;i&#93;&#41;
    end
endend # module
endef</code></pre>
<ol start="4">
<li><p>Run <code>make</code>. This will set up a dummy project and launch nvim with julia recording everything that is compiled. Wait until the LanguageServer responds &#40;there are a bunch of things in this dummy project that will result in warnings&#41; and then run some LanguageServer commands, for example <code>::lua vim.lsp.buf.hover&#40;&#41;</code> to fetch documentation&#41;.</p>
</li>
<li><p>Quit vim.</p>
</li>
<li><p>PackageCompiler will now build a custom <code>languageserver.so</code> sysimage.</p>
</li>
<li><p>Enjoy the Julia LSP&#33;</p>
</li>
</ol>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Setting Up Julia LSP for Neovim</em>. <a href="https://jacobzelko.com/08312022162228-julia-lsp-setup">https://jacobzelko.com/08312022162228-julia-lsp-setup</a>. August 31 2022.</p>
<h2 id="references">References</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Wed, 31 Aug 2022 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Pure Functions in Programming  ]]>
  </title>
  <link> https://jacobzelko.com/11082021225843-pure-functions/index.html </link>
  <guid> https://jacobzelko.com/11082021225843-pure-functions/index.html </guid>
  <description>
    <![CDATA[  An attempted overview on what is meant by pure functions  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Pure Functions in Programming</h1>
<p><strong>Date:</strong> November 8 2021</p>
<p><strong>Summary:</strong> An attempted overview on what is meant by pure functions</p>
<p><strong>Keywords:</strong> #pure #functions #functional #programming  #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<p>The definition of pure is somewhat of a moving target. Pure can mean many things and when applied to programming functions - even more so. Based on querying the <a href="https://discourse.julialang.org/t/can-programming-in-julia-be-pure/71165">Julia community</a>, here was what I understood pure functions to be.</p>
<p>Based on Milewski&#39;s definition, &quot;A pure function is one in which the same result is always produced with no side effects given the same input.&quot; &#91;1&#93; <a href="https://github.com/CameronBieganek">Cameron Bieganek</a> explained how, in Julia specifically, you can write functions that are &quot;probably&quot; pure. However, there is no real guarantee that a function is actually pure, because it depends on the various methods that have been implemented. I like the notion of &quot;probably&quot; pure as it encapsulates a more pragmatic approach to the internals of a given language. It lets one get away without having to necessarily be completely aware of all the internals when discussing purity.</p>
<p>Finally, pure functions are different from mathematical functions for the reason that mathematical functions map a value to another value. Pure functions written in a programming language involve more than just a mapping. &#91;1&#93;</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Pure Functions in Programming</em>. <a href="https://jacobzelko.com/11082021225843-pure-functions">https://jacobzelko.com/11082021225843-pure-functions</a>. November 8 2021.</p>
<h2 id="references">References:</h2>
<p>&#91;1&#93; B. Milewski, Category Theory for Programmers, Version v1.3.0-0-g6bb0bc0. 2019.</p>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Mon, 08 Nov 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Notes on Programming in Haskell  ]]>
  </title>
  <link> https://jacobzelko.com/11032021155827-haskell-programming/index.html </link>
  <guid> https://jacobzelko.com/11032021155827-haskell-programming/index.html </guid>
  <description>
    <![CDATA[  My notes on an overview and summary on how to use Haskell  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Notes on Programming in Haskell</h1>
<p><strong>Date:</strong> November 3 2021</p>
<p><strong>Summary:</strong> My notes on an overview and summary on how to use Haskell</p>
<p><strong>Keywords:</strong> #syntax ##summary #haskell #programming #languages #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Packages</li><li>Functions<ol><li>Ar</li></ol></li><li>Haskell Type System<ol><li><code>Bool</code></li><li><code>Char</code></li><li><code>String</code></li><li><code>&#40;&#41;</code></li><li>Type Coercion</li></ol></li><li>Pattern Matching</li><li>Syntax<ol><li>Loops and Recursion</li><li>Guards</li><li>Types</li><li>Functions<ol><li>Defining Function in <code>ghci</code></li><li>Defining Function in a Script</li><li>Variable Wildcards</li></ol></li><li>Function Composition</li><li>Double colons</li><li>Infix Operators</li></ol></li><li>Equality<ol><li>Functional Equality</li><li>Extensional Equality</li></ol></li><li>Examples<ol><li>Print &quot;Hello World&#33;&quot;</li><li>Reload a Loaded File</li></ol></li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="packages">Packages</h3>
<p><a href="https://jacobzelko.com/11032021171123-prelude-haskell-library">Prelude</a> - Haskell&#39;s Standard Library <a href="https://jacobzelko.com/10022023022918-data-haskell-library">Data</a> - Common abstract data type manipulations for use within Haskell</p>
<h3 id="functions">Functions</h3>
<p>All functions are <a href="https://jacobzelko.com/11082021225843-pure-functions">pure</a> within Haskell. This means that the same result is always produced with no side effects given the same input to a Haskell function.</p>
<p>Haskell functions are lazy.  They do not evaluate until needed.</p>
<h4 id="ar">Ar</h4>
<h3 id="haskell_type_system">Haskell Type System</h3>
<p>Except only in very seldom cases, type annotations are optional in Haskell.</p>
<h4 id="bool"><code>Bool</code></h4>
<p>A two element set of <code>True</code> and <code>False</code>.</p>
<h4 id="char"><code>Char</code></h4>
<p>A set of all Unicode characters.</p>
<h4 id="string"><code>String</code></h4>
<p>A synonym for an infinite list of <code>Char</code>&#39;s.</p>
<h4 id="8979721170172830534"><code>&#40;&#41;</code></h4>
<p>A dummy value where there is only one instance of it ever. It is pronounced unit.</p>
<pre><code class="language-haskell">-- Unit typing example-- Function declaration
f44 :: &#40;&#41; -&gt; Integer-- Function definition
f44 &#40;&#41; &#61; 44-- Function invocation
f44 &#40;&#41; -- Returns the value 44</code></pre>
<h4 id="type_coercion">Type Coercion</h4>
<p>Haskell provides <code>unsafeCoerce</code> to bypass the type system.</p>
<h3 id="pattern_matching">Pattern Matching</h3>
<p>Example:</p>
<pre><code class="language-haskell">is_zero 0 &#61; True
is_zero _ &#61; False</code></pre>
<h3 id="syntax">Syntax</h3>
<h4 id="loops_and_recursion">Loops and Recursion</h4>
<p>Loops do not exist in Haskell&#33; Rather, to do looping, one must use recursion. Here is a Haskell example that calculates the factorial of a number:</p>
<pre><code class="language-haskell">fac n &#61; do
  if n &lt;&#61; 1
    then 1
  else
    n * fac &#40;n - 1&#41;</code></pre>
<h4 id="guards">Guards</h4>
<p>Requires a boolean expression that determines the definition of a function. Used most often in recursion. Example:</p>
<pre><code class="language-haskell">-- Generates a list from a given series of terms
asc :: Int -&gt; Int -&gt; &#91;Int&#93;
asc n m 
  | m &lt; n &#61; &#91;&#93;
  | m &#61;&#61; n &#61; &#91;m&#93;
  | m &gt; n &#61; n : asc &#40;n &#43; 1&#41; m</code></pre>
<h4 id="types">Types</h4>
<p>All concrete types start with a capital letter. Names of type variables start with a lowercase letter.</p>
<h4 id="functions__2">Functions</h4>
<p>A function type is created by putting an arrow between two types.</p>
<pre><code class="language-haskell">f :: foo -&gt; bar</code></pre>
<p>A function definition uses the name of the function and formal parameters. The body of a function follows an equals sign. Furthermore, the body of a function is always an expression.</p>
<p>One of the strangest quirks about Haskell functions is that arguments are neither surrounded by parentheses nor separated by commas.</p>
<h5 id="defining_function_in_ghci">Defining Function in <code>ghci</code></h5>
<pre><code class="language-julia">-- Defining a function within ghci
-- Requires the use of multiple lines as denoted
-- by :&#123; ... :&#125; 
« Prelude » λ&gt; :&#123;
Prelude| add :: Integer -&gt; Integer -&gt; Integer -- Function declaration
Prelude| add x y &#61; x &#43; y -- Function definition
Prelude| :&#125;« Prelude » λ&gt; &#40;add 5 3&#41; -- Compute sum of two numbers
8</code></pre>
<h5 id="defining_function_in_a_script">Defining Function in a Script</h5>
<pre><code class="language-haskell">-- Creating function declaration
add :: Integer -&gt; Integer -&gt; Integer-- Creating function definition
add x y &#61; x &#43; y-- Compute sum of two numbers
add 5 3</code></pre>
<h5 id="variable_wildcards">Variable Wildcards</h5>
<p>Arguments can be discarded with a wildcard by the following notation:</p>
<pre><code class="language-haskell">fInt :: Integer -&gt; &#40;&#41;
fInt _ &#61; &#40;&#41;</code></pre>
<h4 id="function_composition">Function Composition</h4>
<p>Functions can be composed by putting a period between them &#40;or a Unicode circle, &quot;◦&quot;&#41;:</p>
<pre><code class="language-haskell">-- Define two functions:
f1 :: A -&gt; B
f2 :: B -&gt; C-- Compose them together:
f1 . f2-- Or use alternative composition syntax:
f1 ◦ f2</code></pre>
<h4 id="double_colons">Double colons</h4>
<p>In Haskell, a double colon means, &quot;has type of...&quot;</p>
<pre><code class="language-haskell">f :: foo -&gt; bar</code></pre>
<h4 id="infix_operators">Infix Operators</h4>
<p>Any infix operator can be turned into a two-argument function by surrounding them with parentheses:</p>
<pre><code class="language-haskell">&quot;Hello &quot; &#43;&#43; &quot;world&#33;&quot;</code></pre>
<p>Can be rewritten as:</p>
<pre><code class="language-haskell">&#40;&#43;&#43;&#41; &quot;Hello &quot; &quot;world&#33;&quot;</code></pre>
<h3 id="equality">Equality</h3>
<h4 id="functional_equality">Functional Equality</h4>
<p>Haskell enables you to express equality of functions:</p>
<pre><code class="language-haskell">mappend &#61; &#40;&#43;&#43;&#41;</code></pre>
<p>This is also known as point-free equality as the arguments to these functions are not defined.</p>
<h4 id="extensional_equality">Extensional Equality</h4>
<p>Haskell defines extensional equality loosely where</p>
<pre><code class="language-haskell">mappend s1 s2 &#61; &#40;&#43;&#43;&#41; s1 s2</code></pre>
<p>is saying that the output of the function of the left is equivalent to the output of the function on the right. This is also known as point-wise equality as the arguments &#40;points&#41; are defined.</p>
<h3 id="examples">Examples</h3>
<h4 id="print_hello_world">Print &quot;Hello World&#33;&quot;</h4>
<p>This goes in a script called <code>hello.hs</code></p>
<pre><code class="language-haskell">main &#61; do
    putStrLn &quot;Hello World&#33;&quot;</code></pre>
<p>To load it within <code>ghci</code>, open <code>ghci</code> within the same repository that houses the script then run in <code>gchi</code>:</p>
<ol>
<li><p><code>:load &quot;hello.hs&quot;</code></p>
</li>
<li><p><code>:main</code></p>
</li>
</ol>
<p>And here would be the respective output one should see</p>
<pre><code class="language-julia">λ&gt; :load &quot;hello.hs&quot;
&#91;1 of 1&#93; Compiling Main             &#40; hello.hs, interpreted &#41;
Ok, one module loaded.
λ&gt; :main
Hello World&#33;</code></pre>
<h4 id="reload_a_loaded_file">Reload a Loaded File</h4>
<p>To reload a previously loaded file after you make changes to the file, run <code>:reload</code>.</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Notes on Programming in Haskell</em>. <a href="https://jacobzelko.com/11032021155827-haskell-programming">https://jacobzelko.com/11032021155827-haskell-programming</a>. November 3 2021.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Functional Programming  ]]>
  </title>
  <link> https://jacobzelko.com/11032021180434-functional-programming/index.html </link>
  <guid> https://jacobzelko.com/11032021180434-functional-programming/index.html </guid>
  <description>
    <![CDATA[  An overview on what functional programming is and the  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Functional Programming</h1>
<p><strong>Date:</strong> November 3 2021</p>
<p><strong>Summary:</strong> An overview on what functional programming is and the</p>
<p><strong>Keywords:</strong> #functional #programming #paradigm #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Overview</li><li>Paradigm</li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="overview">Overview</h3>
<ul>
<li><p>There is an interest in pure &#40;mathematical&#41; functions</p>
<ul>
<li><p>Functions that some input and output but nothing else</p>
</li>
</ul>
</li>
<li><p>Immutable data </p>
<ul>
<li><p>Data types cannot be changed in-place</p>
</li>
</ul>
</li>
<li><p>Less side effects</p>
</li>
<li><p>Declarative</p>
</li>
<li><p>Easier to verify</p>
<ul>
<li><p>Can mathematically prove an implementation</p>
</li>
</ul>
</li>
</ul>
<h3 id="paradigm">Paradigm</h3>
<p>The approach of asking programming questions that functional programmers take is much more overarching. &#91;1&#93; Examples are:</p>
<ol>
<li><p>When designing an interactive program, they would ask: What is interaction?</p>
</li>
<li><p>When implementing Conway&#39;s Game of Life, they would ruminate on the meaning of life.</p>
</li>
</ol>
<p>To a functional programmer, the essence of programming, per Milewski, is to take big problems and decompose them into smaller problems. Then create small solutions that can then be composed together to solve the big problem. &#91;1&#93;</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Functional Programming</em>. <a href="https://jacobzelko.com/11032021180434-functional-programming">https://jacobzelko.com/11032021180434-functional-programming</a>. November 3 2021.</p>
<h2 id="references">References:</h2>
<p>&#91;1&#93; B. Milewski, Category Theory for Programmers, Version v1.3.0-0-g6bb0bc0. 2019.</p>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Prelude - Haskell&#39;s Standard Library  ]]>
  </title>
  <link> https://jacobzelko.com/11032021171123-prelude-haskell-library/index.html </link>
  <guid> https://jacobzelko.com/11032021171123-prelude-haskell-library/index.html </guid>
  <description>
    <![CDATA[  An overview of important components from Haskell&#39;s standard  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Prelude - Haskell&#39;s Standard Library</h1>
<p><strong>Date:</strong> November 3 2021</p>
<p><strong>Summary:</strong> An overview of important components from Haskell&#39;s standard</p>
<p><strong>Keywords:</strong> #library #package #standard #prelude #haskell #programming #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Identity Function</li></ol></li><li>How To Cite</li><li>References:</li><li>Discussion: </li></ol></div>
<h3 id="identity_function">Identity Function</h3>
<p><code>id</code> returns the argument it is given:</p>
<pre><code class="language-haskell">-- Using Prelude to declare the identity function
-- &#96;a&#96; is a type variable and stands in for all types
id :: a -&gt; a-- Definition of the function
id x &#61; x</code></pre>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Prelude - Haskell&#39;s Standard Library</em>. <a href="https://jacobzelko.com/11032021171123-prelude-haskell-library">https://jacobzelko.com/11032021171123-prelude-haskell-library</a>. November 3 2021.</p>
<h2 id="references">References:</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Wed, 03 Nov 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Manipulating Files in R  ]]>
  </title>
  <link> https://jacobzelko.com/02082021203741-R-file-manipulation/index.html </link>
  <guid> https://jacobzelko.com/02082021203741-R-file-manipulation/index.html </guid>
  <description>
    <![CDATA[  Tips and tricks on how to manipulate files in R  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Manipulating Files in R</h1>
<p><strong>Date:</strong> February 8 2021</p>
<p><strong>Summary:</strong> Tips and tricks on how to manipulate files in R</p>
<p><strong>Keywords:</strong> #zettel #r #programming #tips #tricks #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Loading Files</li></ol></li><li>How To Cite</li><li>References</li><li>Discussion: </li></ol></div>
<h3 id="loading_files">Loading Files</h3>
<p>To load in files via the R REPL, do:</p>
<pre><code class="language-r">source&#40;&quot;name_of_file.R&quot;&#41;</code></pre>
<p>This updates the state of the session and brings into the current session any variables defined within the file.</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Manipulating Files in R</em>. <a href="https://jacobzelko.com/02082021203741-R-file-manipulation">https://jacobzelko.com/02082021203741-R-file-manipulation</a>. February 8 2021.</p>
<h2 id="references">References</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  renv - Reproducible Environments in R  ]]>
  </title>
  <link> https://jacobzelko.com/02082021205610-renv-package/index.html </link>
  <guid> https://jacobzelko.com/02082021205610-renv-package/index.html </guid>
  <description>
    <![CDATA[  Useful state of the art package for reproducing R projects  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>renv - Reproducible Environments in R</h1>
<p><strong>Date:</strong> February 8 2021</p>
<p><strong>Summary:</strong> Useful state of the art package for reproducing R projects</p>
<p><strong>Keywords:</strong> #zettel #r #programming #package #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>General Workflow When Working with <code>renv</code></li></ol></li><li>How To Cite</li><li>References</li><li>Discussion: </li></ol></div>
<h3 id="general_workflow_when_working_with_renv">General Workflow When Working with <code>renv</code></h3>
<ol>
<li><p>Call <code>renv::init&#40;&#41;</code> to initialize a new project-local environment with a private R library,</p>
</li>
<li><p>Work in the project as normal, installing and removing new R packages as they are needed in the project,</p>
</li>
<li><p>Call <code>renv::snapshot&#40;&#41;</code> to save the state of the project library to the lockfile &#40;called <code>renv.lock</code>&#41;,</p>
</li>
<li><p>Continue working on your project, installing and updating R packages as needed.</p>
</li>
<li><p>Call <code>renv::snapshot&#40;&#41;</code> again to save the state of your project library if your attempts to update R packages were successful, or call <code>renv::restore&#40;&#41;</code> to revert to the previous state as encoded in the lockfile if your attempts to update packages introduced some new problems.</p>
</li>
</ol>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>renv - Reproducible Environments in R</em>. <a href="https://jacobzelko.com/02082021205610-renv-package">https://jacobzelko.com/02082021205610-renv-package</a>. February 8 2021.</p>
<h2 id="references">References</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Programming in R  ]]>
  </title>
  <link> https://jacobzelko.com/02082021203324-r-programming/index.html </link>
  <guid> https://jacobzelko.com/02082021203324-r-programming/index.html </guid>
  <description>
    <![CDATA[  Tips and tricks I learn while writing R code  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Programming in R</h1>
<p><strong>Date:</strong> February 8 2021</p>
<p><strong>Summary:</strong> Tips and tricks I learn while writing R code</p>
<p><strong>Keywords:</strong> #zettel #r #programming #statistics #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li><ol><li>Reading and Loading Files</li><li>Packages</li></ol></li><li>How To Cite</li><li>References</li><li>Discussion: </li></ol></div>
<h3 id="reading_and_loading_files">Reading and Loading Files</h3>
<ul>
<li><p><a href="https://jacobzelko.com/02082021203741-R-file-manipulation">File manipulation</a></p>
</li>
</ul>
<h3 id="packages">Packages</h3>
<ul>
<li><p><a href="https://jacobzelko.com/02082021205610-renv-package">renv</a> - Useful state of the art package for reproducing R projects.</p>
</li>
</ul>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Programming in R</em>. <a href="https://jacobzelko.com/02082021203324-r-programming">https://jacobzelko.com/02082021203324-r-programming</a>. February 8 2021.</p>
<h2 id="references">References</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Mon, 08 Feb 2021 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Implicit Returns  ]]>
  </title>
  <link> https://jacobzelko.com/05192020171152-implicit-return/index.html </link>
  <guid> https://jacobzelko.com/05192020171152-implicit-return/index.html </guid>
  <description>
    <![CDATA[  How Julia performs implicit returns  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Implicit Returns</h1>
<p><strong>Date:</strong> May 19 2020</p>
<p><strong>Summary:</strong> How Julia performs implicit returns</p>
<p><strong>Keywords:</strong> ##zettel #julialang #programming #implicit #return #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li>How To Cite</li><li>References</li><li>Discussion: </li></ol></div>
<pre><code class="language-julia">function is_leap_year&#40;year&#41;
    if &#40;year &#37; 4 &#61;&#61; 0&#41; &amp;&amp; &#33;&#40;year &#37; 100 &#61;&#61; 0&#41; || &#40;year &#37; 400 &#61;&#61; 0&#41;
        return true
    else
        return false
    end</code></pre>
<p>is equivalent to the expression</p>
<pre><code class="language-julia">julia&gt; is_leap_year&#40;year&#41; &#61; &#40;year &#37; 4 &#61;&#61; 0&#41; &amp;&amp; &#33;&#40;year &#37; 100 &#61;&#61; 0&#41; || &#40;year &#37; 400 &#61;&#61; 0&#41;julia&gt; is_leap_year&#40;1995&#41;
false</code></pre>
<p>This works because Julia performs implicit returns in their functions by returning the result of the function&#39;s last evaluated expression.</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Implicit Returns</em>. <a href="https://jacobzelko.com/05192020171152-implicit-return">https://jacobzelko.com/05192020171152-implicit-return</a>. May 19 2020.</p>
<h2 id="references">References</h2>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Tue, 19 May 2020 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>

<item>
  <title>
    <![CDATA[  Global Programming Paradigm  ]]>
  </title>
  <link> https://jacobzelko.com/04182020162028-global-programming/index.html </link>
  <guid> https://jacobzelko.com/04182020162028-global-programming/index.html </guid>
  <description>
    <![CDATA[  A thought on a global overlapping paradigm for developing useful and just-in-time software  ]]>
  </description>  
  
  <content:encoded>
    <![CDATA[  
<h1>Global Programming Paradigm</h1>
<p><strong>Date:</strong> April 18 2020</p>
<p><strong>Summary:</strong> A thought on a global overlapping paradigm for developing useful and just-in-time software</p>
<p><strong>Keywords:</strong> ##zettel #paradigms #models #writing #programming ##metascience #smart #blank #page #poet #archive</p>
<h1>Bibliography</h1>
<p>Not Available</p>
<h1>Table of Contents</h1>
<div class="franklin-toc"><ol><li>How To Cite</li><li>References</li><li>Discussion: </li></ol></div>
<p>I read a Q&amp;A article on Barbara Liskov &#91;1&#93; and the author made a very interesting comparison between Liskov&#39;s work of designing paradigms for creating well structured and crafted code with that of a Poet or Novelist. I have heard of comparisons like this before but I was quite intrigued by the latter – a programmer being compared to a writer. What piqued my interest the most about the article was the following statement,</p>
<p>&quot;As a computer scientist thinking about code, Liskov had no physical objects to work with. Like a novelist or a poet, <em>she was staring at a blank page</em>.&quot; &#40;emphasis added&#41;</p>
<p>The end of that statement, &quot;<em>blank page</em>&quot;, reminded me of the book <em>How to Take Smart Notes</em> &#91;2&#93; and my note on the book where Ahrens essentially believes that starting with a <a href="https://jacobzelko.com/03292020180520-smart-notes">blank page is the wrong idea in writing</a>. I wonder if the same could be true about programming. In effect, does a global approach to building software make more sense than to artificially package each and every piece of software separately? Could an approach like the <a href="https://jacobzelko.com/03092020031549-zettelkasten">Zettelkasten method</a> where, according to its <a href="https://jacobzelko.com/03092020031618-zettelkasten-principles">principles</a>, each thought is kept to itself and then linked to different associated pieces of knowledge, map to software development?</p>
<p>Upon reflection upon this note some time later, I think I was thinking about the concept of composition and composition of software&#33;</p>
<h2 id="how_to_cite">How To Cite</h2>
<p>Zelko, Jacob. <em>Global Programming Paradigm</em>. <a href="https://jacobzelko.com/04182020162028-global-programming">https://jacobzelko.com/04182020162028-global-programming</a>. April 18 2020.</p>
<h2 id="references">References</h2>
<p>&#91;1&#93; S. D’Agostino, “The Architect of Modern Algorithms.” https://www.quantamagazine.org/barbara-liskov-is-the-architect-of-modern-algorithms-20191120/ &#40;accessed Apr. 18, 2020&#41;.</p>
<p>&#91;2&#93; S. Ahrens, How to Take Smart Notes: One Simple Technique to Boost Writing, Learning and Thinking – for Students, Academics and Nonfiction Book Writers. 2017.</p>
<h2 id="discussion">Discussion: </h2>
<script>talkyardServerUrl='https://site-vbm8wbc57o.talkyard.net';</script>
<script async defer src="https://c1.ty-cdn.net/-/talkyard-comments.min.js"></script>
<div class="talkyard-comments" data-discussion-id="" style="margin-top: 45px;">
    <noscript>Please enable Javascript to view comments.</noscript>
</div> ]]>
  </content:encoded>
    
  <pubDate>Sat, 18 Apr 2020 00:00:00 +0000</pubDate>  
  
  
  <atom:author>
    <atom:name>Jacob Zelko</atom:name>
  </atom:author>
        
</item>
</channel></rss>